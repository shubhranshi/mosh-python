05 Models

We are going to create the models for the "movies" app.
These models are Python classes that we use to represent our application data.

We open the "models.py" from the movies app.
And create the classes we need, that must derive them from the "models.Model" class.
In Django we have the "django.db" package and that package encapsulates all the functionalities
to work with database.
In that package we have the "models" module, and in that module we have a class called "Models".
This class encapsulate functionalities for storing, retrieving, filter a model object in a database.
By inheriting our Genre class from the base Model class in Django, our Genre class will also inherit all the
functionality which means we dont have to write any code to store Genre object in the database. Django will
automatically take care of that.

class Genre(models.Model):
    name = models.CharField(max_length=255)

So we set the class attribute "name" that is its label (Action, Comedy, Drama, etc.).
And set it to an instance of a Field class in Django.
We set it to a "CharField" (to represent a database field that can contain textual data) with a maximum
of 255 characters. With "max_length" set to 255 no genre can have more than 255 characters.
This is also a security practice, because a hacker can not create a genre with more characters.

Now we define our movies class.

class Movie(models.Model):
    title = models.CharField(max_length=255, unique=True)
    release_year = models.IntegerField(max_length=4)
    number_in_stock = models.IntegerField()
    daily_rate = models.FloatField()
    genre = models.ForeignKey(Genre, on_delete=models.CASCADE)

In the "Movie" class we have several attributes -
"title" that we set to a character field
"release_year" we set on an integer field with maximum length of 4 numbers
"number_in_stock" we set on an integer field
"daily_rate" we set to a float field.
"genre" that we use to associate each movie with the "Genre" class.
Using Foreignkey() we can create a relationship between movies and genre.
The first argument is the Genre class (as we want a relationship between Movie and Genre)
We set the second keyword argument, "on_delete" to models.CASCADE, this means that if we delete a genre,
all the movies associated with it will also be deleted.
